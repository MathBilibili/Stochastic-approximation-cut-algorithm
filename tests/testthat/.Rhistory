library(doParallel)
detectCores()
num_core <- detectCores()
library(modeltools)
library(flexclust)
library(compiler)
library(truncnorm)
library(mvtnorm)
library(foreach)
library(iterators)
library(doParallel)
library(dplyr)
library(tidyr)
library(data.table)
library(SAC)
library(SACut)
Z <- c(7, 6, 10, 10, 1, 1, 10, 4, 35, 0, 10, 8, 4)
Npart <- c(111, 71, 162, 188, 145, 215, 166, 37, 173,143, 229, 696, 93)
Y <-  c(16, 215, 362, 97, 76, 62, 710, 56, 133,28, 62, 413, 194)
Npop <- c(26983, 250930, 829348, 157775, 150467, 352445, 553066, 26751, 75815, 150302, 354993, 3683043, 507218)
d_x<-2       # dimension of theta
d_y<-13       # dimension of phi
px<-function(phi,Z){
PbZ<-rbind(phi,Z,Npart)
out<-sum(apply(PbZ,FUN=function(y){dbeta(x=y[1],shape1 = (1+y[2]), shape2 = (1+y[3]-y[2]), log = T)},MARGIN = 2))
return(out)
}
py<-function(Y,theta,phi){
PbY<-rbind(phi,Y,Npop)
out<- log(1/200)+sum(apply(PbY,FUN=function(y){dpois(x=y[2],lambda = (y[3]*0.001*exp(theta[1]+theta[2]*y[1])),log = T)},MARGIN = 2))
return(out)
}
prox<-function(phi_n,phi){
out<-sum(log(dtruncnorm(phi_n, a=0, b=1, mean = phi, sd = 0.005)))
return(out)
}
rprox<-function(phi){
out<-rtruncnorm(1, a=0, b=1, mean = phi, sd = 0.005)
return(out)
}
proy<-function(theta_n,theta){
re<-dmvnorm(as.numeric(theta_n),mean = as.numeric(theta),sigma = matrix(c(0.1648181,-0.3979341,-0.3979341,2.737874),ncol=2,nrow=2)/10)
return(re)
}
rproy<-function(theta){
re<-rmvnorm(1,mean = theta,sigma = matrix(c(0.1648181,-0.3979341,-0.3979341,2.737874),ncol=2,nrow=2)/10) %>% t()
return(re)
}
cutmodel <- SACut::CutModel(px = px, py = py, prox = prox, rprox = rprox, proy = proy, rproy = rproy,
Z = Z, Y = Y, d_x = d_x, d_y = d_y)
expect_true(is.list(cutmodel))
comenvir <- SACut::ComEnvir(is_Unix = TRUE, core_num = 2, clusterExport = list('py','Y','Npop','dmvnorm'))
comenvir <- SACut::ComEnvir(is_Unix = F, core_num = 2, clusterExport = list('py','Y','Npop','dmvnorm'))
PhiC <- SACut::LoadOldPhi0(filename="PhiC_test.csv")
init<-list(theta=c(-2,13),phi=apply(PhiC,MARGIN = 2,median),t=as.matrix(c(-2,13)),I=1)
PreRun <- SACut::Preliminary_SACut(init=init, PhiC,numrun=250,auxrun=200,no=10,acce_pa=1, sig_dig=c(3,2), CutModel=cutmodel)
library(testthat)
SACut::SACut(pre_values=PreRun, PhiC=PhiC,numrun=100,burnin=10,thin=1, no=10,acce_pa=1, sig_dig=c(3,2),
filename='Result.csv', Comenvir=comenvir, CutModel=cutmodel)
result <- read.csv('Result.csv')
expect_true(is.data.frame(result))
expect_equal(dim(result),c(90,20))
unlink('Result.csv')
library(doParallel)
stopCluster()
library(testthat)
Z <- as.numeric(fread('Z.txt')[[1]])
library(modeltools)
library(flexclust)
library(compiler)
library(truncnorm)
library(mvtnorm)
library(foreach)
library(iterators)
library(doParallel)
library(dplyr)
library(data.table)
library(tidyr)
Z <- as.numeric(fread('Z.txt')[[1]])
ind_var<-seq(1,50)
Y <-  as.numeric(fread('Y.txt')[[1]])
d_x<-1    # dimension of theta
d_y<-1      # dimension of phi
px<-function(phi,Z){
out<-sum(sapply(Z,FUN=function(y){dnorm(y,mean = phi,sd=1,log = T)}))+dnorm(phi,mean = 0,sd=100,log = T)
return(out)
}
#unnormalizing density2 Y|theta&phi \times theta
py<-function(Y,theta,phi){
PbY<-rbind(Y,ind_var)
out<-sum(apply(PbY,FUN=function(y){dnorm(y[1],mean = theta+phi*y[2],sd = 3,log = T)},MARGIN = 2))+dnorm(theta,mean = 0,sd=100,log = T)
return(out)
}
#proposal 1
prox<-function(phi_n,phi){
out<-dnorm(phi_n, mean=phi, sd=0.25,log = T)
return(out)
}
#proposal 1 samling function
rprox<-function(phi){
out<-rnorm(1, mean=phi, sd=0.25)
return(out)
}
proy<-function(t_n,t){
re<-dnorm(as.numeric(t_n),mean = as.numeric(t),sd=2)
return(re)
}
rproy<-function(t){
re<-rnorm(1,mean = t, sd=2) %>% t()
return(re)
}
cutmodel <- SACut::CutModel(px = px, py = py, prox = prox, rprox = rprox, proy = proy, rproy = rproy,
Z = Z, Y = Y, d_x = d_x, d_y = d_y)
expect_true(is.list(cutmodel))
comenvir <- SACut::ComEnvir(is_Unix = FALSE, core_num = 2, clusterExport = list('py','Y','ind_var','dnorm'))
expect_true(is.list(comenvir))
SACut::BuildNewPhi0(numrun = 1000, burnin = 0,numsel = 10,CutModel = cutmodel)
numrun = 1000; burnin = 0;numsel = 10;CutModel = cutmodel
px <- CutModel$px
py <- CutModel$py
prox <- CutModel$prox
rprox <- CutModel$rprox
denT <- CutModel$proy
tranT <- CutModel$rproy
Z <- CutModel$Z
Y <- CutModel$Y
d_x <- CutModel$d_x
d_y <- CutModel$d_y
init<-list(phi=rep(0.5,d_y))
MAux<-function(init,Z,num_run=1000,burn_in=500,thin=1){
phi<-init$phi
sto.phi<-as.matrix(rep(phi,((num_run-burn_in)/thin))) #note the dimension of phi
dim(sto.phi)<-c(((num_run-burn_in)/thin),length(phi))
for(i in 1:num_run){
if((i<=burn_in)|(i%%thin!=0)){
phi_n<-rprox(phi)
rate<-px(phi_n,Z)+prox(phi,phi_n)-px(phi,Z)-prox(phi_n,phi)
alfa<-min(1,exp(rate))
rpan<-runif(1)
phi<-phi_n*sign(rpan<=alfa)+phi*sign(rpan>alfa)
}else{
phi_n<-rprox(phi)
rate<-px(phi_n,Z)+prox(phi,phi_n)-px(phi,Z)-prox(phi_n,phi)
alfa<-min(1,exp(rate))
rpan<-runif(1)
phi<-phi_n*sign(rpan<=alfa)+phi*sign(rpan>alfa)
sto.phi[((i-burn_in)/thin),]<-phi
}
}
out<-sto.phi[duplicated.matrix(sto.phi,MARGIN = 1)!=T,]
return(out)
}
MAux<-cmpfun(MAux)     #byte compile
#standardise element of phi
Phistar<-MAux(init,Z,num_run=numrun,burn_in=burnin,thin=1)
Phistar
if(d_y!=1){
da<-apply(Phistar,max,MARGIN = 1)
xi<-apply(Phistar,min,MARGIN = 1)
p<-cbind(Phistar,da,xi)
stan<-function(v){
v<-as.vector(v)
if(v[length(v)]!=v[length(v)-1]){
out<-(v[1:(length(v)-2)]-v[length(v)])/(v[length(v)-1]-v[length(v)])
}else{
out<-rep(0,(length(v)-2))
}
return(out)
}
Phistan<-t(apply(p,FUN=stan,MARGIN = 1))
}else{
Phistan<-Phistar
}
Phistan
dim(Phistan)
dim(Phistan)[1]
t(Phistan)
dim(t(Phistan))
dim(t(t(Phistan)))
as.matrix(Phistan)
is.vector(Phistan)
aa<-as.matrix(Phistan)
is.vector(aa)
dim(aa)
if(is.vector(Phistan)){Phistan<-as.matrix(Phistan)}
Phistan
#Max-Min process
MMP<-function(Phi,num_sel=100){
if(d_y!=1){
num_sel<-min(num_sel,dim(Phi)[1])
ind<-seq(1,dim(Phi)[1])
A<-sample(ind,size=1)
Ac<-ind[!ind%in%A]
for(i in 2:num_sel){
X<-Phi[A,]
if(is.vector(X)){
X<-t(as.matrix(X))
}
Y<-Phi[Ac,]
d<-dist2(X,Y)
mi<-apply(d,min,MARGIN = 2)
A[i]<-Ac[which.max(mi)]
Ac<-ind[!ind%in%A]
}
return(A)
}else{
num_sel<-min(num_sel,dim(Phi)[1])
ind<-seq(1,dim(Phi)[1])
A<-sample(ind,size=1)
Ac<-ind[!ind%in%A]
for(i in 2:num_sel){
X<-Phi[A,]
Y<-Phi[Ac,]
d<-dist2(X,Y)
mi<-apply(d,min,MARGIN = 2)
A[i]<-Ac[which.max(mi)]
Ac<-ind[!ind%in%A]
}
return(A)
}
}
MMP<-cmpfun(MMP)
PhiC<-Phistar[MMP(Phistan,num_sel=numsel),]
Phi<-Phistan
num_sel<-min(num_sel,dim(Phi)[1])
num_sel=100
num_sel<-min(num_sel,dim(Phi)[1])
ind<-seq(1,dim(Phi)[1])
A<-sample(ind,size=1)
Ac<-ind[!ind%in%A]
X<-Phi[A,]
i
i<-2
Y<-Phi[Ac,]
X
Y
d<-dist2(X,Y)
d
mi<-apply(d,min,MARGIN = 2)
mi
A[i]<-Ac[which.max(mi)]
Ac<-ind[!ind%in%A]
i<-3
X<-Phi[A,]
Y<-Phi[Ac,]
d<-dist2(X,Y)
mi<-apply(d,min,MARGIN = 2)
A[i]<-Ac[which.max(mi)]
Ac<-ind[!ind%in%A]
num_sel<-min(num_sel,dim(Phi)[1])
ind<-seq(1,dim(Phi)[1])
A<-sample(ind,size=1)
Ac<-ind[!ind%in%A]
for(i in 2:num_sel){
X<-Phi[A,]
Y<-Phi[Ac,]
d<-dist2(X,Y)
mi<-apply(d,min,MARGIN = 2)
A[i]<-Ac[which.max(mi)]
Ac<-ind[!ind%in%A]
}
d_y
if(is.vector(Phistan)){Phistan<-as.matrix(Phistan)}
Phistan
MMP(Phistan,num_sel=numsel)
Phistar
if(is.vector(Phistan)){Phistar<-as.matrix(Phistar);Phistan<-as.matrix(Phistan)}
#Max-Min process
MMP<-function(Phi,num_sel=100){
if(d_y!=1){
num_sel<-min(num_sel,dim(Phi)[1])
ind<-seq(1,dim(Phi)[1])
A<-sample(ind,size=1)
Ac<-ind[!ind%in%A]
for(i in 2:num_sel){
X<-Phi[A,]
if(is.vector(X)){
X<-t(as.matrix(X))
}
Y<-Phi[Ac,]
d<-dist2(X,Y)
mi<-apply(d,min,MARGIN = 2)
A[i]<-Ac[which.max(mi)]
Ac<-ind[!ind%in%A]
}
return(A)
}else{
num_sel<-min(num_sel,dim(Phi)[1])
ind<-seq(1,dim(Phi)[1])
A<-sample(ind,size=1)
Ac<-ind[!ind%in%A]
for(i in 2:num_sel){
X<-Phi[A,]
Y<-Phi[Ac,]
d<-dist2(X,Y)
mi<-apply(d,min,MARGIN = 2)
A[i]<-Ac[which.max(mi)]
Ac<-ind[!ind%in%A]
}
return(A)
}
}
MMP<-cmpfun(MMP)
PhiC<-Phistar[MMP(Phistan,num_sel=numsel),]
MMP(Phistan,num_sel=numsel)
Phistar
if(is.vector(Phistan)){Phistar<-as.matrix(Phistar);Phistan<-as.matrix(Phistan)}
px <- CutModel$px
py <- CutModel$py
prox <- CutModel$prox
rprox <- CutModel$rprox
denT <- CutModel$proy
tranT <- CutModel$rproy
Z <- CutModel$Z
Y <- CutModel$Y
d_x <- CutModel$d_x
d_y <- CutModel$d_y
init<-list(phi=rep(0.5,d_y))
MAux<-function(init,Z,num_run=1000,burn_in=500,thin=1){
phi<-init$phi
sto.phi<-as.matrix(rep(phi,((num_run-burn_in)/thin))) #note the dimension of phi
dim(sto.phi)<-c(((num_run-burn_in)/thin),length(phi))
for(i in 1:num_run){
if((i<=burn_in)|(i%%thin!=0)){
phi_n<-rprox(phi)
rate<-px(phi_n,Z)+prox(phi,phi_n)-px(phi,Z)-prox(phi_n,phi)
alfa<-min(1,exp(rate))
rpan<-runif(1)
phi<-phi_n*sign(rpan<=alfa)+phi*sign(rpan>alfa)
}else{
phi_n<-rprox(phi)
rate<-px(phi_n,Z)+prox(phi,phi_n)-px(phi,Z)-prox(phi_n,phi)
alfa<-min(1,exp(rate))
rpan<-runif(1)
phi<-phi_n*sign(rpan<=alfa)+phi*sign(rpan>alfa)
sto.phi[((i-burn_in)/thin),]<-phi
}
}
out<-sto.phi[duplicated.matrix(sto.phi,MARGIN = 1)!=T,]
return(out)
}
MAux<-cmpfun(MAux)     #byte compile
#standardise element of phi
Phistar<-MAux(init,Z,num_run=numrun,burn_in=burnin,thin=1)
if(d_y!=1){
da<-apply(Phistar,max,MARGIN = 1)
xi<-apply(Phistar,min,MARGIN = 1)
p<-cbind(Phistar,da,xi)
stan<-function(v){
v<-as.vector(v)
if(v[length(v)]!=v[length(v)-1]){
out<-(v[1:(length(v)-2)]-v[length(v)])/(v[length(v)-1]-v[length(v)])
}else{
out<-rep(0,(length(v)-2))
}
return(out)
}
Phistan<-t(apply(p,FUN=stan,MARGIN = 1))
}else{
Phistan<-Phistar
}
if(is.vector(Phistan)){Phistar<-as.matrix(Phistar);Phistan<-as.matrix(Phistan)}
#Max-Min process
MMP<-function(Phi,num_sel=100){
if(d_y!=1){
num_sel<-min(num_sel,dim(Phi)[1])
ind<-seq(1,dim(Phi)[1])
A<-sample(ind,size=1)
Ac<-ind[!ind%in%A]
for(i in 2:num_sel){
X<-Phi[A,]
if(is.vector(X)){
X<-t(as.matrix(X))
}
Y<-Phi[Ac,]
d<-dist2(X,Y)
mi<-apply(d,min,MARGIN = 2)
A[i]<-Ac[which.max(mi)]
Ac<-ind[!ind%in%A]
}
return(A)
}else{
num_sel<-min(num_sel,dim(Phi)[1])
ind<-seq(1,dim(Phi)[1])
A<-sample(ind,size=1)
Ac<-ind[!ind%in%A]
for(i in 2:num_sel){
X<-Phi[A,]
Y<-Phi[Ac,]
d<-dist2(X,Y)
mi<-apply(d,min,MARGIN = 2)
A[i]<-Ac[which.max(mi)]
Ac<-ind[!ind%in%A]
}
return(A)
}
}
MMP<-cmpfun(MMP)
PhiC<-Phistar[MMP(Phistan,num_sel=numsel),]
PhiC
#store PhiC for future use
write.csv(PhiC,"PhiC.csv",row.names = F)
write.table(PhiC,"PhiC.csv",row.names = F,col.names = F,sep = ',')
xx<-read.csv('PhiC.csv')
head(xx)
xx<-read.csv('PhiC.csv',head=F)
xx

library(devtools)
devtools::document()
devtools::document()
px<-function(x){
return(sin(x))
}
px(3)
seq(1,10)
px(seq(1,t1))
px(seq(1,10))
ggplot(px(seq(1,10)))
library(ggplot2)
ggplot(px(seq(1,10)))
xx<-data.frame(x=seq(1,10),y=f(seq(1,10)))
xx<-data.frame(x=seq(1,10),y=px(seq(1,10)))
xx
ggplot(data = xx,aes(x=x,y=y))+geom_point()
result<-ggplot(data = xx,aes(x=x,y=y))+geom_point()
print(result)
print(result)
px<-function(x){
return(sin(x))
}
bubu <- function(t1=10,f=px) {
xx<-data.frame(x=seq(1,t1),y=f(seq(1,t1)))
result<-ggplot(data = xx,aes(x=x,y=y))+geom_point()
print(result)
}
bubu(100,px)
devtools::load_all(".")
library(SACut)
?bubu
?SACut
??SACut
SACut
?idmapping
?SACut
ggplot2
ggplot
?ggplot
ggplot2
ggplot
library(SACut)
ggplot
bubu
?bubu
?px
px
bubu(t1=20)
library(ggplot2)
bubu(t1=20)
bubu(t1=100)
px<-function(x){
return((x)^2)
}
bubu(t1=100)
bubu(t1=100,f=px)
rm(px)
library(SACut)
ggplot
Z
Npop
?CutModel
library(SACut)
?CutModel
library(SACut)
?CutModel
library(SACut)
?CutModel
?sin
?arcsin
library(SACut)
x<-CutModel()
x<-CutModel(px=px,py=py)
x
px
py
py(Y,theta = c(1,2),phi=rep(1,13))
d_y
list(px=px,py=py, Z = Z, Y = Y, d_x = d_x, d_y = d_y)
cpp_yes
CutM
CutModel()
CutModel(px = px, py = py, Z = Z, Y = Y, d_x = d_x, d_y = d_y, cpp_yes = FALSE, cpp_package = '')
CutModel(px = cos(), py = py, Z = Z, Y = Y, d_x = d_x, d_y = d_y, cpp_yes = FALSE, cpp_package = '')
px<-cos
CutModel(px = px, py = py, Z = Z, Y = Y, d_x = d_x, d_y = d_y, cpp_yes = FALSE, cpp_package = '')
CutModel(px = px, py = py, Z = Z, Y = Y, d_x = d_x, d_y = d_y, cpp_yes = FALSE, cpp_package = '')->A
A$px(4)
A$px(17)
library(SACut)
?CutModel
library(SACut)
A<-CutModel()
A<-CutModel(px = px, py = py, prox = prox, rprox = rprox, denT = denT, tranT = tranT, Z = Z, Y = Y, d_x = d_x, d_y = d_y, cpp_yes = FALSE, cpp_package = '')
A$prox()
library(truncnorm)
A$prox()
A$prox(c(1,2),c(2,2))
A$prox(c(1,2),c(1,2))
A$prox(c(0.1,0.2),c(0.1,0.2))
A$prox
A$tranT
A$d_y
?hello
A$tranT(2)
A<-function(x){}
A(3)
x<-A(3)
x
library(doParallel)
?makeCluster
?clusterExport
library(SACut)
?ComEnvir
A<-ComEnvir(is_Unix = F,core_num = 2, clusterExport = list('Z'))
A
A<-ComEnvir(is_Unix = F,core_num = 2, clusterExport = list('Z','yl'))
A
list('py','Y','Npop','dmvnorm')
AA<-CutModel(px = px, py = py, prox = prox, rprox = rprox, denT = denT, tranT = tranT, Z = Z, Y = Y, d_x = d_x, d_y = d_y, cpp_yes = FALSE, cpp_package = '')
ss<-AA$px
ss
PX
px
library(SACut)
?BuildNewPhi0
library(SACut)
?BuildNewPhi0
library(SACut)
?BuildNewPhi0
library(SACut)
?LoadNewPhi0
library(SACut)
fread
fread
library(SACut)
?LoadOldPhi0
library(SACut)
?Preliminary_SACut
library(SACut)
?Preliminary_SACut
library(SACut)
?Preliminary_SACut
library(SACut)
?Preliminary_SACut
list('ed',list('py','Y','Npop','dmvnorm'))
list('ed',list('py','Y','Npop','dmvnorm'))[[1]]
list('ed',list('py','Y','Npop','dmvnorm'))[[2]]
list(is.Unix='ed',list('py','Y','Npop','dmvnorm'))[[2]]
list(is.Unix='ed',list('py','Y','Npop','dmvnorm'))
list(is.Unix='ed',sd=list('py','Y','Npop','dmvnorm'))
ComEnvir<-function(is_Unix = TRUE, core_num = 1, clusterExport = list('py','Y','Npop','dmvnorm')){
if(is_Unix){
cl<-makeCluster(core_num,type = 'FORK')
registerDoParallel(cl)
return(list(is_Unix=is_Unix))
}else{
#cl<-makeCluster(detectCores( ))
cl<-makeCluster(core_num)
registerDoParallel(cl)
return(list(is_Unix=is_Unix, clusterExport=clusterExport))
}
}
ComEnvir(is_Unix = F, core_num = 3,clusterExport = list('SS','Y'))->A
library(doParallel)
ComEnvir(is_Unix = F, core_num = 3,clusterExport = list('SS','Y'))->A
A$is_Unix
A$clusterExport
list('py','Y','Npop','dmvnorm')
A$clusterExport
ComEnvir
library(SACut)
?SACut
library(SACut)
library(SACut)
library(SACut)
library(SACut)
library(SACut)
library(SACut)
?SACut
SACut
?SACut
packageDescription(SACut)
packageDescription('SACut')
library(SACut)
packageDescription('SACut')
library(SACut)
library(SACut)
library(devtools)
remove.packages('SACut')
devtools::install_github('MathBilibili/Stochastic-approximation-cut-algorithm')
library(doParallel)
?mvtnorm
library(mvtnorm)
?mvtnorm
?rmvnorm
library(coda)
?CutModel
library(SACut)
?CutModel
?rnorm
?ComEnvir
?LoadOldPhi0
?BuildNewPhi0
?Preliminary_SACut
?SACut
?CutModel
library(SACut)
library(c("modeltools", "flexclust", "compiler", "doParallel", "dplyr", "tidyr", "data.table"))
library(modeltools)
library(flexclust)
library(compiler)
library(truncnorm)
library(mvtnorm)
library(foreach)
library(iterators)
library(doParallel)
library(dplyr)
library(tidyr)
library(data.table)
Z <- c(7, 6, 10, 10, 1, 1, 10, 4, 35, 0, 10, 8, 4)
Npart <- c(111, 71, 162, 188, 145, 215, 166, 37, 173,143, 229, 696, 93)
Y <-  c(16, 215, 362, 97, 76, 62, 710, 56, 133,28, 62, 413, 194)
Npop <- c(26983, 250930, 829348, 157775, 150467, 352445, 553066, 26751, 75815, 150302, 354993, 3683043, 507218)
d_x<-2       # dimension of theta
d_y<-13       # dimension of phi
px<-function(phi,Z){
PbZ<-rbind(phi,Z,Npart)
out<-sum(apply(PbZ,FUN=function(y){dbeta(x=y[1],shape1 = (1+y[2]), shape2 = (1+y[3]-y[2]), log = T)},MARGIN = 2))
return(out)
}
py<-function(Y,theta,phi){
PbY<-rbind(phi,Y,Npop)
out<- log(1/200)+sum(apply(PbY,FUN=function(y){dpois(x=y[2],lambda = (y[3]*0.001*exp(theta[1]+theta[2]*y[1])),log = T)},MARGIN = 2))
return(out)
}
prox<-function(phi_n,phi){
out<-sum(log(dtruncnorm(phi_n, a=0, b=1, mean = phi, sd = 0.005)))
return(out)
}
rprox<-function(phi){
out<-rtruncnorm(1, a=0, b=1, mean = phi, sd = 0.005)
return(out)
}
proy<-function(theta_n,theta){
re<-dmvnorm(as.numeric(theta_n),mean = as.numeric(theta),sigma = matrix(c(0.1648181,-0.3979341,-0.3979341,2.737874),ncol=2,nrow=2)/10)
return(re)
}
rproy<-function(theta){
re<-rmvnorm(1,mean = theta,sigma = matrix(c(0.1648181,-0.3979341,-0.3979341,2.737874),ncol=2,nrow=2)/10) %>% t()
return(re)
}
cutmodel <- SACut::CutModel(px = px, py = py, prox = prox, rprox = rprox, proy = proy, rproy = rproy,
Z = Z, Y = Y, d_x = d_x, d_y = d_y)
cutmodel
comenvir <- SACut::ComEnvir(is_Unix = FALSE, core_num = 2, clusterExport = list('py','Y','Npop','dmvnorm'))
setwd("D:/360download/nus_statistics/Cam_biostat/stochastic_approximation_cut/code/test2")
PhiC <- LoadOldPhi0(filename="PhiC.csv")
init=list(theta=c(-2,13),phi=apply(PhiC,MARGIN = 2,median),t=as.matrix(c(-2,13)),I=1)
PreRun <- SACut::Preliminary_SACut(init=init, PhiC,numrun=254,auxrun=250,no=1,acce_pa=0.1, sig_dig=c(3,2), CutModel=cutmodel)
SACut::SACut(pre_values=PreRun, PhiC=PhiC,numrun=100,burnin=0,thin=1, no=1,acce_pa=0.1, sig_dig=c(3,2),
filename='Result.csv', Comenvir=comenvir, CutModel=cutmodel)
?SACut
library(SACut)
?SACut
library(SACut)
